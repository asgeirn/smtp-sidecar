image: ${REGISTRY}/docker/library/golang:1.25.0-trixie

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
      variables:
        IMAGE: ${REGISTRY}/${CI_PROJECT_PATH}:mr-${CI_MERGE_REQUEST_IID}
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
      variables:
        IMAGE: ${REGISTRY}/${CI_PROJECT_PATH}:latest

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.cache
  cache:
    paths:
      - .cache

.parallel:
  extends: .go-cache
  variables:
  parallel:
    matrix:
      - GOARCH:
          - amd64
          - arm64
        GOOS: linux
      - GOARCH: arm64
        GOOS: darwin
  tags:
    - k8s

stages:
  - verify
  - upload
  - build
  - deploy
  - sign
  - test
  - post_test

test:
  extends: .go-cache
  stage: verify
  cache:
    policy: push
  tags:
    - k8s
  variables:
    OTEL_SERVICE_NAME: ${CI_PROJECT_NAME}
    OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-cluster-opentelemetry-collector.default:4317
  script:
    - go install github.com/jstemmer/go-junit-report/v2@latest
    - go install github.com/mdelapenya/junit2otlp@latest
    - go install golang.org/x/vuln/cmd/govulncheck@latest
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - $GOPATH/bin/govulncheck -format sarif ./... > vulns.sarif.json
    - |
      go test -race -json $(go list ./... | grep -v /vendor/) 2>&1 | \
      $GOPATH/bin/go-junit-report -parser gojson | tee report.xml | \
      $GOPATH/bin/junit2otlp
  artifacts:
    paths:
      - vulns.sarif.json
    reports:
      sast:
        - vulns.sarif.json
      junit:
        - report.xml

compile:
  extends: .parallel
  stage: build
  variables:
    TARGET: ${CI_PROJECT_NAME}-${GOOS}-${GOARCH}
    CGO_ENABLED: "0"
  script:
    - go build -o ${TARGET} ./...
    - |
      curl --fail --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
        --cacert /etc/gitlab-runner/certs/ca.crt \
        --upload-file ${TARGET} \
        ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_PIPELINE_IID}/${TARGET}
  artifacts:
    paths:
      - ${TARGET}

deploy:
  stage: deploy
  image: ${REGISTRY}/twingine/coder/buildah
  tags:
    - k8s
  needs:
    - job: compile
      parallel:
        matrix:
          - GOARCH:
              - amd64
              - arm64
            GOOS:
              - linux
      artifacts: true
  variables:
    GIT_STRATEGY: empty
  script:
    - buildah manifest create ${IMAGE}
    - |
      for ARCH in amd64 arm64; do
        container=$(buildah from scratch)
        buildah copy $container ${CI_PROJECT_NAME}-linux-${ARCH} /smtp-sidecar
        buildah config --arch ${ARCH} --entrypoint '["/smtp-sidecar"]' $container
        buildah commit --manifest ${IMAGE} --sbom syft --sbom-image-output /sbom.json --sbom-output sbom-${ARCH}.json $container ${IMAGE}-${ARCH}
      done
    - buildah manifest push --digestfile image.dgst ${IMAGE}
    - echo IMAGE_DIGEST=$(cat image.dgst) >> build.env
  artifacts:
    reports:
      cyclonedx: sbom-*.json
      dotenv: build.env
    paths:
      - sbom-*.json

sign:
  image: ${REGISTRY}/docker/library/alpine
  stage: sign
  variables:
    GIT_STRATEGY: empty
    REGISTRY_AUTH_FILE: ${CI_PROJECT_DIR}/auth.json
  rules:
    - needs:
        - job: deploy
          artifacts: true
  script:
    - apk --update add cosign curl
    - cosign generate-key-pair
    - curl --data-binary @cosign.pub -X POST -u "${REGISTRY_USER}:${REGISTRY_AUTH}" "https://${REGISTRY}/v2/_zot/ext/cosign"
    - cosign login ${REGISTRY} -u ${REGISTRY_USER} -p ${REGISTRY_AUTH}
    - cosign sign --key cosign.key --tlog-upload=false --recursive ${IMAGE}@${IMAGE_DIGEST}
  artifacts:
    paths:
      - cosign.pub

# MegaLinter GitLab CI job configuration file
# More info at https://megalinter.io/
megalinter:
  stage: test
  allow_failure: true
  # You can override MegaLinter flavor used to have faster performances
  # More info at https://megalinter.io/flavors/
  image: ${REGISTRY}/docker/oxsecurity/megalinter-security:v8.8.0
  script: ["/bin/bash /entrypoint.sh"]
  variables:
    # All available variables are described in documentation
    # https://megalinter.io/configuration/
    DEFAULT_WORKSPACE: $CI_PROJECT_DIR
    # ADD YOUR CUSTOM ENV VARIABLES HERE TO OVERRIDE VALUES OF .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
    SARIF_REPORTER: "true"
    GRYPE_DB_UPDATE_URL: http://grype-db.default.svc.cluster.local:8080
  artifacts:
    when: always
    paths:
      - megalinter-reports
    expire_in: 1 week

include:
  - template: Jobs/SAST.gitlab-ci.yml
  - remote: https://raw.githubusercontent.com/MaibornWolff/secobserve_actions_templates/main/templates/importer.yml
  - remote: https://raw.githubusercontent.com/MaibornWolff/secobserve_actions_templates/main/templates/SAST/semgrep.yml
  - remote: https://raw.githubusercontent.com/MaibornWolff/secobserve_actions_templates/main/templates/SCA/grype_sbom.yml
  - remote: https://raw.githubusercontent.com/MaibornWolff/secobserve_actions_templates/main/templates/SCA/trivy_image.yml
  - remote: https://raw.githubusercontent.com/MaibornWolff/secobserve_actions_templates/main/templates/check_security_gate.yml

govulncheck:
  extends: .importer
  variables:
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}
    SO_PRODUCT_NAME: SMTP Sidecar
    SO_ORIGIN_DOCKER_IMAGE_NAME_TAG: ${IMAGE}
    SO_FILE_NAME: vulns.sarif.json
    SO_PARSER_NAME: SARIF
  needs:
    - job: test
      artifacts: true

megalinter-reports:
  extends: .importer
  stage: test
  variables:
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}
    SO_PRODUCT_NAME: SMTP Sidecar
    SO_ORIGIN_DOCKER_IMAGE_NAME_TAG: ${IMAGE}
    SO_FILE_NAME: megalinter-reports/megalinter-report.sarif
    SO_PARSER_NAME: SARIF
  needs:
    - job: megalinter
      artifacts: true

semgrep:
  extends: .semgrep
  variables:
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}
    SO_PRODUCT_NAME: SMTP Sidecar
    SO_ORIGIN_DOCKER_IMAGE_NAME_TAG: ${IMAGE}
    CONFIGURATION: ${SEMGREP_CONFIG}
    TARGET: .
    REPORT_NAME: semgrep.json

grype:
  extends: .grype_image
  needs:
    - job: deploy
      artifacts: true
  variables:
    TARGET: sbom-amd64.json
    REPORT_NAME: grype.json
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}
    SO_PRODUCT_NAME: SMTP Sidecar
    SO_ORIGIN_DOCKER_IMAGE_NAME_TAG: ${IMAGE}
    SO_SUPPRESS_LICENSES: "false"

trivy:
  extends: .trivy_image
  needs:
    - job: deploy
      artifacts: true
  variables:
    TARGET: ${IMAGE}@${IMAGE_DIGEST}
    REPORT_NAME: trivy.json
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}
    SO_PRODUCT_NAME: SMTP Sidecar
    TRIVY_USERNAME: ${REGISTRY_USER}
    TRIVY_PASSWORD: ${REGISTRY_AUTH}
    SO_SUPPRESS_LICENSES: "false"
    FURTHER_PARAMETERS: --vex repo

check:
  extends: .check_security_gate
  variables:
    SO_PRODUCT_NAME: SMTP Sidecar
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}

image: golang:latest

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.cache
  cache:
    paths:
      - .cache

.parallel:
  extends: .go-cache
  variables:
  parallel:
    matrix:
      - GOARCH:
          - amd64
          - arm64
        GOOS: linux
      - GOARCH: arm64
        GOOS: darwin
  tags:
    - k8s

stages:
  - verify
  - build
  - deploy
  - test
  - post_test

format:
  extends: .go-cache
  stage: verify
  tags:
    - k8s
  script:
    - go install github.com/jstemmer/go-junit-report/v2@latest
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race -json $(go list ./... | grep -v /vendor/) 2>&1 | $GOPATH/bin/go-junit-report -parser gojson -set-exit-code > report.xml
  artifacts:
    reports:
      junit: 
        - report.xml

compile:
  extends: .parallel
  stage: build
  variables:
    TARGET: ${CI_PROJECT_NAME}-${GOOS}-${GOARCH}
    CGO_ENABLED: "0"
  script:
    - go build -o ${TARGET} ./...
    - |
      curl --fail --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
        --cacert /etc/gitlab-runner/certs/ca.crt \
        --upload-file ${TARGET} \
        ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_PIPELINE_IID}/${TARGET}
  artifacts:
    paths:
      - ${TARGET}

deploy:
  stage: deploy
  image: quay.twingine.com/asgeir/coder/buildah
  tags:
    - k8s
  needs:
    - job: compile
      parallel:
        matrix:
          - GOARCH:
              - amd64
              - arm64
            GOOS:
              - linux
      artifacts: true
  variables:
    GIT_STRATEGY: empty
    IMAGE: ${REGISTRY}/${CI_PROJECT_PATH}
  script:
    - buildah manifest create ${IMAGE}
    - |
      for ARCH in amd64 arm64; do
        container=$(buildah from scratch)
        buildah copy $container ${CI_PROJECT_NAME}-linux-${ARCH} /smtp-sidecar
        buildah config --arch ${ARCH} --entrypoint '["/smtp-sidecar"]' $container
        buildah commit --manifest ${IMAGE} --sbom syft --sbom-image-output /sbom.json --sbom-output sbom-${ARCH}.json $container ${IMAGE}-${ARCH}
      done
    - buildah manifest push ${IMAGE}
  artifacts:
    reports:
      cyclonedx: sbom-*.json
    paths:
      - sbom-*.json

include:
  - template: Jobs/SAST.gitlab-ci.yml
  - remote: https://raw.githubusercontent.com/MaibornWolff/secobserve_actions_templates/refs/heads/dev/templates/SAST/semgrep.yml
  - remote: https://raw.githubusercontent.com/MaibornWolff/secobserve_actions_templates/refs/heads/dev/templates/SCA/grype_sbom.yml
  - remote: https://raw.githubusercontent.com/MaibornWolff/secobserve_actions_templates/refs/heads/dev/templates/SCA/trivy_image.yml
  - remote: https://raw.githubusercontent.com/MaibornWolff/secobserve_actions_templates/refs/heads/dev/templates/check_security_gate.yml

semgrep:
  extends: .semgrep
  variables:
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}
    SO_PRODUCT_NAME: SMTP Sidecar
    SO_ORIGIN_DOCKER_IMAGE_NAME_TAG: ${REGISTRY}/${CI_PROJECT_PATH}:latest
    CONFIGURATION: ${SEMGREP_CONFIG}
    TARGET: .
    REPORT_NAME: semgrep.json

grype:
  extends: .grype_image
  needs:
    - job: deploy
      artifacts: true
  variables:
    TARGET: sbom-amd64.json
    REPORT_NAME: grype.json
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}
    SO_PRODUCT_NAME: SMTP Sidecar
    SO_ORIGIN_DOCKER_IMAGE_NAME_TAG: ${REGISTRY}/${CI_PROJECT_PATH}:latest

trivy:
  extends: .trivy_image
  needs:
    - job: deploy
      artifacts: false
  variables:
    TARGET: ${REGISTRY}/${CI_PROJECT_PATH}:latest
    REPORT_NAME: trivy.json
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}
    SO_PRODUCT_NAME: SMTP Sidecar
    TRIVY_USERNAME: ${REGISTRY_USER}
    TRIVY_PASSWORD: ${REGISTRY_AUTH}
    SO_SUPPRESS_LICENSES: "false"
    FURTHER_PARAMETERS: --vex repo

check:
  extends: .check_security_gate
  variables:
    SO_PRODUCT_NAME: SMTP Sidecar
    SO_BRANCH_NAME: ${CI_COMMIT_BRANCH}
